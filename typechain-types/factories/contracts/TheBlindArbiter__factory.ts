/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TheBlindArbiter,
  TheBlindArbiterInterface,
} from "../../contracts/TheBlindArbiter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "wasHonest",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "realCard",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "claimedCard",
        type: "uint8",
      },
    ],
    name: "GameResult",
    type: "event",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimedCard",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "euint8",
        name: "encryptedCard",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "claimed",
        type: "uint8",
      },
    ],
    name: "setupRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5062000032620000266200008860201b60201c565b6200016060201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000826200017460201b60201c565b620005fa565b62000092620003ba565b604051806080016040528073687820221192c5b662b25367f70076a37bc79b6c73ffffffffffffffffffffffffffffffffffffffff16815260200173848b0066793bcc60346da1f49049357399b8d59573ffffffffffffffffffffffffffffffffffffffff16815260200173a02cda4ca3a71d7c46997716f4283aa851c2881273ffffffffffffffffffffffffffffffffffffffff168152602001731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac73ffffffffffffffffffffffffffffffffffffffff16815250905090565b62000171816200025e60201b60201c565b50565b60016000815480929190620001899062000473565b91905055506001600d4244600154604051602001620001ab93929190620004e5565b6040516020818303038152906040528051906020012060001c620001d0919062000557565b620001dc91906200058f565b600060146101000a81548160ff021916908360ff1602179055506001600d4260015460405160200162000211929190620005ca565b6040516020818303038152906040528051906020012060001c62000236919062000557565b6200024291906200058f565b600060156101000a81548160ff021916908360ff160217905550565b6000620002706200039260201b60201c565b905081600001518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081602001518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081604001518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606001518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60007f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700905090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620004808262000469565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620004b557620004b46200043a565b5b600182019050919050565b6000819050919050565b620004df620004d98262000469565b620004c0565b82525050565b6000620004f38286620004ca565b602082019150620005058285620004ca565b602082019150620005178284620004ca565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620005648262000469565b9150620005718362000469565b92508262000584576200058362000528565b5b828206905092915050565b60006200059c8262000469565b9150620005a98362000469565b9250828201905080821115620005c457620005c36200043a565b5b92915050565b6000620005d88285620004ca565b602082019150620005ea8284620004ca565b6020820191508190509392505050565b61085f806200060a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630dc824071461005c5780638da5cb5b1461007a578063c743d67f14610098578063d2ef7398146100b4578063da1f12ab146100d2575b600080fd5b6100646100f0565b60405161007191906103ec565b60405180910390f35b610082610103565b60405161008f9190610448565b60405180910390f35b6100b260048036038101906100ad91906104ca565b610127565b005b6100bc6101ef565b6040516100c99190610525565b60405180910390f35b6100da6102db565b6040516100e79190610559565b60405180910390f35b600060159054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ac906105d1565b60405180910390fd5b80600060156101000a81548160ff021916908360ff16021790555080600060146101000a81548160ff021916908360ff1602179055505050565b600080600060159054906101000a900460ff1660ff1603610245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023c9061063d565b60405180910390fd5b60008060159054906101000a900460ff16905060008060149054906101000a900460ff16905060008260ff168260ff161490503373ffffffffffffffffffffffffffffffffffffffff167fa23b5519cd077ebdbc4a861847d3cf441dbddb28aae1055a45ca102a217b242b8284866040516102c29392919061065d565b60405180910390a26102d26102ea565b80935050505090565b60006102e56103c6565b905090565b600160008154809291906102fd906106c3565b91905055506001600d424460015460405160200161031d9392919061072c565b6040516020818303038152906040528051906020012060001c6103409190610798565b61034a91906107c9565b600060146101000a81548160ff021916908360ff1602179055506001600d4260015460405160200161037d9291906107fd565b6040516020818303038152906040528051906020012060001c6103a09190610798565b6103aa91906107c9565b600060156101000a81548160ff021916908360ff160217905550565b6000612711905090565b600060ff82169050919050565b6103e6816103d0565b82525050565b600060208201905061040160008301846103dd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061043282610407565b9050919050565b61044281610427565b82525050565b600060208201905061045d6000830184610439565b92915050565b600080fd5b6000819050919050565b61047b81610468565b811461048657600080fd5b50565b60008135905061049881610472565b92915050565b6104a7816103d0565b81146104b257600080fd5b50565b6000813590506104c48161049e565b92915050565b600080604083850312156104e1576104e0610463565b5b60006104ef85828601610489565b9250506020610500858286016104b5565b9150509250929050565b60008115159050919050565b61051f8161050a565b82525050565b600060208201905061053a6000830184610516565b92915050565b6000819050919050565b61055381610540565b82525050565b600060208201905061056e600083018461054a565b92915050565b600082825260208201905092915050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b60006105bb600a83610574565b91506105c682610585565b602082019050919050565b600060208201905081810360008301526105ea816105ae565b9050919050565b7f4e6f2061637469766520726f756e640000000000000000000000000000000000600082015250565b6000610627600f83610574565b9150610632826105f1565b602082019050919050565b600060208201905081810360008301526106568161061a565b9050919050565b60006060820190506106726000830186610516565b61067f60208301856103dd565b61068c60408301846103dd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106ce82610540565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610700576106ff610694565b5b600182019050919050565b6000819050919050565b61072661072182610540565b61070b565b82525050565b60006107388286610715565b6020820191506107488285610715565b6020820191506107588284610715565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107a382610540565b91506107ae83610540565b9250826107be576107bd610769565b5b828206905092915050565b60006107d482610540565b91506107df83610540565b92508282019050808211156107f7576107f6610694565b5b92915050565b60006108098285610715565b6020820191506108198284610715565b602082019150819050939250505056fea264697066735822122069f6ddd04bccfc815d2b08d445b56c05c437713ab4bcd0507380a558f105ed4d64736f6c63430008180033";

type TheBlindArbiterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TheBlindArbiterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TheBlindArbiter__factory extends ContractFactory {
  constructor(...args: TheBlindArbiterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TheBlindArbiter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TheBlindArbiter__factory {
    return super.connect(runner) as TheBlindArbiter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TheBlindArbiterInterface {
    return new Interface(_abi) as TheBlindArbiterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TheBlindArbiter {
    return new Contract(address, _abi, runner) as unknown as TheBlindArbiter;
  }
}
