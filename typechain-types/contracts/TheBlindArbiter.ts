/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TheBlindArbiterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "challenge"
      | "claimedCard"
      | "owner"
      | "protocolId"
      | "setupRound"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameResult"): EventFragment;

  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedCard",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupRound",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setupRound", data: BytesLike): Result;
}

export namespace GameResultEvent {
  export type InputTuple = [
    player: AddressLike,
    wasHonest: boolean,
    realCard: BigNumberish,
    claimedCard: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    wasHonest: boolean,
    realCard: bigint,
    claimedCard: bigint
  ];
  export interface OutputObject {
    player: string;
    wasHonest: boolean;
    realCard: bigint;
    claimedCard: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TheBlindArbiter extends BaseContract {
  connect(runner?: ContractRunner | null): TheBlindArbiter;
  waitForDeployment(): Promise<this>;

  interface: TheBlindArbiterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challenge: TypedContractMethod<[], [boolean], "nonpayable">;

  claimedCard: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  setupRound: TypedContractMethod<
    [encryptedCard: BytesLike, claimed: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimedCard"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setupRound"
  ): TypedContractMethod<
    [encryptedCard: BytesLike, claimed: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GameResult"
  ): TypedContractEvent<
    GameResultEvent.InputTuple,
    GameResultEvent.OutputTuple,
    GameResultEvent.OutputObject
  >;

  filters: {
    "GameResult(address,bool,uint8,uint8)": TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
    GameResult: TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
  };
}
