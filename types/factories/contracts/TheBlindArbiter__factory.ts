/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TheBlindArbiter,
  TheBlindArbiterInterface,
} from "../../contracts/TheBlindArbiter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "wasHonest",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "realCard",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "claimedCard",
        type: "uint8",
      },
    ],
    name: "GameResult",
    type: "event",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimedCard",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "euint8",
        name: "encryptedCard",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "claimed",
        type: "uint8",
      },
    ],
    name: "setupRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b5f80546001600160a01b031916331790556101a36101a8565b6102f1565b60018054905f6101b7836102a1565b90915550506001546040805142602082015244918101919091526060810191909152600d90608001604051602081830303815290604052805190602001205f1c61020191906102b9565b61020c9060016102d8565b5f60146101000a81548160ff021916908360ff160217905550600d42600154604051602001610245929190918252602082015260400190565b604051602081830303815290604052805190602001205f1c61026791906102b9565b6102729060016102d8565b5f60156101000a81548160ff021916908360ff160217905550565b634e487b7160e01b5f52601160045260245ffd5b5f600182016102b2576102b261028d565b5060010190565b5f826102d357634e487b7160e01b5f52601260045260245ffd5b500690565b808201808211156102eb576102eb61028d565b92915050565b610438806102fe5f395ff3fe608060405234801561000f575f5ffd5b5060043610610064575f3560e01c8063c743d67f1161004d578063c743d67f146100d6578063d2ef7398146100eb578063da1f12ab14610103575f5ffd5b80630dc82407146100685780638da5cb5b14610092575b5f5ffd5b5f5461007b90600160a81b900460ff1681565b60405160ff90911681526020015b60405180910390f35b5f546100b19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b6100e96100e4366004610394565b610113565b005b6100f36101e6565b6040519015158152602001610089565b6040516127118152602001610089565b5f5473ffffffffffffffffffffffffffffffffffffffff16331461017e5760405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79206f776e65720000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5f80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a81b60ff939093169283027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1617600160a01b9290920291909117905550565b5f8054600160a81b900460ff1681036102415760405162461bcd60e51b815260206004820152600f60248201527f4e6f2061637469766520726f756e6400000000000000000000000000000000006044820152606401610175565b5f5460408051600160a81b830460ff908116600160a01b9094041683811480835260208301829052928201849052919033907fa23b5519cd077ebdbc4a861847d3cf441dbddb28aae1055a45ca102a217b242b9060600160405180910390a26102a86102af565b9392505050565b60018054905f6102be836103db565b90915550506001546040805142602082015244918101919091526060810191909152600d90608001604051602081830303815290604052805190602001205f1c61030891906103f3565b610313906001610412565b5f60146101000a81548160ff021916908360ff160217905550600d4260015460405160200161034c929190918252602082015260400190565b604051602081830303815290604052805190602001205f1c61036e91906103f3565b610379906001610412565b5f60156101000a81548160ff021916908360ff160217905550565b5f5f604083850312156103a5575f5ffd5b82359150602083013560ff811681146103bc575f5ffd5b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b5f600182016103ec576103ec6103c7565b5060010190565b5f8261040d57634e487b7160e01b5f52601260045260245ffd5b500690565b80820180821115610425576104256103c7565b9291505056fea164736f6c634300081b000a";

type TheBlindArbiterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TheBlindArbiterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TheBlindArbiter__factory extends ContractFactory {
  constructor(...args: TheBlindArbiterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TheBlindArbiter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TheBlindArbiter__factory {
    return super.connect(runner) as TheBlindArbiter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TheBlindArbiterInterface {
    return new Interface(_abi) as TheBlindArbiterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TheBlindArbiter {
    return new Contract(address, _abi, runner) as unknown as TheBlindArbiter;
  }
}
